library(maptools)
library(rgdal)
library(stepps)
dataDir <- '~/github_changed_files/composition/data/'
load(file = file.path(dataDir, paste0('intersection_eastern_twonships.Rda')))
#------------------------------------------------------------------------------------------------------------
#load coordinates of data used
load('~/workflow_stepps_calibration/calibration/data/elicitation_neus_certainty_median_79_sites_only_abies_new_species.RData')
east <- sort(unique(veg_coords[,'meters.east']))
north <- sort(unique(veg_coords[,'meters.north']))
rm(list=ls(all=TRUE)))
rm(list=ls(all=TRUE))
#load data produced to calibrate vegetation model
load('~/stepps_process_knots/veg_data_15_taxa_754_cells_130_knots.rdata')
y
coord.agg.final
coord.agg.final[,'x']
head(coord.agg.final)
coord.agg.final[,"east"]
sort(unique(coord.agg.final[,"east"]))
coord.veg <- sort(unique(coord.agg.final[,"east"]))
#--------------------------------------------------------------------------------------------------------------------
#this is actually the code that does something useful
library(rioja)
library(maptools)
library(rgdal)
library(stepps)
dataDir <- '~/github_changed_files/composition/data/'
load(file = file.path(dataDir, paste0('intersection_eastern_twonships.Rda')))
x.coords
coord.veg
source(file.path(codeDir, "set_domain.R"))
###########################################################################################################
#added for lower resolution
#xRange[1] <- xRange[1]+16000
xRange[2] <- xRange[2]-16000
xRes <- round((xRes-2)/3)
codeDir <- '~/github_changed_files/composition/code/'
dataDir <- '~/github_changed_files/composition/data/'
require(rgdal)
require(raster)
source("config")
easternDataDir <- "eastern"
ohioDataDir <- "ohio"
eastern_townships <- readOGR(dsn = "/home/mathias/vegetation_data", layer = "1372polygons_v0.9-1")
nTowns <- length(eastern_townships)# + length(ohio_townships)
source(file.path(codeDir, "set_domain.R"))
###########################################################################################################
#added for lower resolution
#xRange[1] <- xRange[1]+16000
xRange[2] <- xRange[2]-16000
xRes <- round((xRes-2)/3)
yRes <- round(yRes/3)
rast <- raster(crs = CRS('+init=epsg:3175'),
xmn = xRange[1], xmx = xRange[2],
ymn = yRange[1], ymx = yRange[2],
#ncols = xRes, nrows = yRes)
ncols = xRes, nrows = yRes)
cooredinates(rast)
coordinates(rast)
aa <- coordinates(rast)
unique(sort(aa[,'x']))
###########################################################################################################
#added for lower resolution
xRange[1] <- xRange[1]+8000
source(file.path(codeDir, "set_domain.R"))
###########################################################################################################
#added for lower resolution
xRange[1] <- xRange[1]+8000
xRange[2] <- xRange[2]-8000
xRes <- round((xRes-2)/3)
yRes <- round(yRes/3)
rast <- raster(crs = CRS('+init=epsg:3175'),
xmn = xRange[1], xmx = xRange[2],
ymn = yRange[1], ymx = yRange[2],
#ncols = xRes, nrows = yRes)
ncols = xRes, nrows = yRes)
aa <- coordinates(rast)
unique(sort(aa[,'x']))
unique(sort(aa[,'y']))
sort(unique(coord.agg.final[,'north']))
source(file.path(codeDir, "set_domain.R"))
###########################################################################################################
#added for lower resolution
xRange[1] <- xRange[1]+8000
xRange[2] <- xRange[2]-8000
yRange[1] <- yRange[1]+8000
yRange[2] <- yRange[2]-16000
xRes <- round((xRes-2)/3)
yRes <- round((yRes-3)/3)
rast <- raster(crs = CRS('+init=epsg:3175'),
xmn = xRange[1], xmx = xRange[2],
ymn = yRange[1], ymx = yRange[2],
#ncols = xRes, nrows = yRes)
ncols = xRes, nrows = yRes)
aa <- coordiantes(rast)
aa <- coordinates(rast)
aa
sort(unique(aa[,'y']))
sort(unique(coord.agg.final[,'north']))
library(rioja)
?read.Tilia
library(neotoma)
translate_taxa
1.46*10^6/3600/20
library(zipfR)
library(rioja)
setwd('~/Reveals_NEUS/')
#--------------------------------------------------------------------------------------------------------------]
#function to estimate species dependent depositional coefficient
Ki <- function(b, R, zmax=400000){
ul1 <- b*(zmax-R)^(1/8)
ul2 <- b*(zmax+R)^(1/8)
ul3 <- b*(2*R)^(1/8)
gamma_Ki <- Igamma(8, ul1, lower=TRUE) -
Igamma(8, ul2, lower=TRUE) +
Igamma(8, ul3, lower=TRUE)
return(4*pi*R/b^8*gamma_Ki)
}
#---------------------------------------------------------------------------------
#function to estimate vegetation proportion
REVEALS_gamma <- function(pollen,fall_speed,ppes,R,zmax,n,u,c){
#calculate parameter b later on used to estimate deposition coeffcient
b <- 4/sqrt(pi) * fall.speed/(n*u*c)
#species specific depositional coefficient
K_species <-
sapply(b,function(x){
Ki(x[[1]],R=R,zmax = zmax)
})
#eq (5) in Sugita (2007a)
weighted_pollen <- pollen/(ppes*K_species)
veg_proportion <- weighted_pollen/sum(weighted_pollen)
return(as.numeric(veg_proportion))
}
#------------------------------------------------------------------------------------------------------------
#load data
pollen <- read.csv("data/reveals_input.csv")
pollen <- pollen[-1]
names(pollen) <- unlist(strsplit(names(pollen),'[.]'))[seq(2,(2*ncol(pollen)),2)]
reveals.params <- read.csv('data/reveals_input_params_variable.csv')
taxa <- reveals.params$species
#fall speed
fall.speed <- reveals.params$fallspeed
names(fall.speed) <- taxa
fall.speed <- as.data.frame(t(fall.speed))
#ppe
ppes <- reveals.params$PPEs
names(ppes) <- taxa
fall.speed <- fall.speed[names(fall.speed)%in%names(pollen)]
ppes <- ppes[names(ppes)%in%names(pollen)]
#massive difference depending on use of meters or km
REVEALS_gamma(pollen,fall_speed,ppes,R=1,zmax=100,n=0.25,u=3,c=0.12)
REVEALS_gamma(pollen,fall_speed,ppes,R=1000,zmax=100000,n=0.25,u=3,c=0.12)
#----------------------------------------------------------------------------------------------------
#test sensitivity to maximum dispersal
distances <- c(seq(10,100,10),seq(200,1000,100))
sensitivity_reveals_gamma <-
sapply(distances,function(x){
REVEALS_gamma(pollen,fall_speed,ppes,R=1,zmax=x,n=0.25,u=3,c=0.12)
})
colnames(sensitivity_reveals_gamma) <- distances
#distances
dist(t(sqrt(sensitivity_reveals_gamma[,c("50","100","400")])))^2
paldist(t(sensitivity_reveals_gamma[,c("50","100","400")]))
#-----------------------------------------------------------------------------------------------------
# load new pollen data
#-----------------------------------------------------------------------------------------------------
load('~/workflow_stepps_calibration/vegetation/data_nb/prediction_13_taxa_6796_cells_120_knots_cal_pl_Ka_Kgamma_EPs_79_sites_final.rdata')
pollen <- y
colnames(pollen)[grep("Other",colnames(pollen))] <- c('Other_conifer','Other_hardwood')
pollen <- pollen[,colnames(pollen)%in%names(ppes)]
sensitivity_all <-
lapply(distances,function(distan){
pred_reveals <-
apply(pollen,1,function(x){
REVEALS_gamma(x,fall_speed,ppes,R=1,zmax=distan,n=0.25,u=3,c=0.12)
})
pred_reveals <- t(pred_reveals)
colnames(pred_reveals) <- colnames(pollen)
round(pred_reveals,3)
})
names(sensitivity_all) <- distances
sensitivity_all[1,]
sensitivity_all <-
lapply(1:nrow(pollen),function(x){
pred_reveals <- sapply(distances,function(distan){
REVEALS_gamma(pollen[x,],fall_speed,ppes,R=1,zmax=distan,n=0.25,u=3,c=0.12)
})
pred_reveals <- t(pred_reveals)
colnames(pred_reveals) <- colnames(pollen)
round(pred_reveals,3)
})
max_dissimilarity <-
sapply(1:length(sensitivity_all),function(x) {
max(paldist(sensitivity_all[[x]]))
})
hist(max_dissimilarity)
#-------------------------------------------------------------------------------------------------------------------
# REVEALS_moonshine <- function(pollen,fall_speed,ppes,R,zmax,n,u,c){
#
#   #calculate parameter b later on used to estimate deposition coeffcient
#   b <- 4/sqrt(pi) * fall.speed/(n*u*c)
#
#   #species specific depositional coefficient
#   K_species <-
#     sapply(b,function(x){
#       Ki(x[[1]],R=R,zmax = zmax)
#     })
#
#   #eq (5) in Sugita (2007a)
#
#   weighted_pollen <- sapply(1:length(pollen),function(zz) {
#     pollen[zz]/(ppes[zz]*K_species[zz])
#   })
#   weighted_pollen <- unlist(weighted_pollen)
#   veg_proportion <- weighted_pollen/sum(weighted_pollen)
#   return(as.numeric(veg_proportion))
# }
#
#
# sensitivity_all <-
#   lapply(1:nrow(pollen),function(x){
#     pred_reveals <- sapply(distances,function(distan){
#       REVEALS_moonshine(pollen[x,],fall_speed,ppes,R=1,zmax=distan,n=0.25,u=3,c=0.12)
#     })
#     pred_reveals <- t(pred_reveals)
#     colnames(pred_reveals) <- colnames(pollen)
#     round(pred_reveals,3)
#   })
#
#
# max_dissimilarity <-
#   sapply(1:length(sensitivity_all),function(x) {
#     max(paldist(sensitivity_all[[x]]))
#   })
#
# hist(max_dissimilarity)
#
#
##########################################################################################################################
#
#########################################################################################################################
K_calc <- function(fall_speed,R,zmax,n,u,c){
#calculate parameter b later on used to estimate deposition coeffcient
b <- 4/sqrt(pi) * fall.speed/(n*u*c)
#species specific depositional coefficient
K_species <-
sapply(b,function(x){
Ki(x[[1]],R=R,zmax = zmax)
})
#eq (5) in Sugita (2007a)
}
K_50000 <- K_calc(fall_speed = fall.speed, R = 200,zmax = 50000,n=0.25,u=3,c=0.12)
K_50000
max_disp <- c(50000,seq(100000,400000,100000))
sappply(max_dist,function(x){
K_calc(fall_speed = fall.speed, R = 200,zmax = x,n=0.25,u=3,c=0.12)
})
sapply(max_dist,function(x){
K_calc(fall_speed = fall.speed, R = 200,zmax = x,n=0.25,u=3,c=0.12)
})
max_dist <- c(50000,seq(100000,400000,100000))
sapply(max_dist,function(x){
K_calc(fall_speed = fall.speed, R = 200,zmax = x,n=0.25,u=3,c=0.12)
})
K <-
sapply(max_dist,function(x){
K_calc(fall_speed = fall.speed, R = 200,zmax = x,n=0.25,u=3,c=0.12)
})
matplot(max_disst,K)
matplot(max_dist,K)
matplot(max_dist,t(K))
matplot(max_dist,t(K),type='l')
matplot(max_dist,t(K),type='b')
matplot(max_dist,t(K),type='b',pch =1:13)
matplot(max_dist,t(K)?1000,type='b',pch =1:13)
matplot(max_dist,t(K)/1000,type='b',pch =1:13)
matplot(max_dist/1000,t(K)/1000,type='b',pch =1:13)
matplot(max_dist/1000,t(K)/1000,type='b',pch =1:13,ylim=c(0,50))
matplot(max_dist/1000,t(K)/1000,type='b',pch =1:13,xlim=c(0,500))
?matplot
taxa
legend('topright',legend =taxa,pch = 1:13,col=1:13,lty=1:13)
matplot(max_dist/1000,t(K)/1000,type='b',pch =1:13,xlim=c(50,500),ylab='',xlab='')
legend('topright',legend =taxa,pch = 1:13,col=1:13,lty=1:13,)
legend('topright',legend =taxa,pch = 1:13,col=1:13,lty=1:13,cex=0.7)
K
matplot(max_dist/1000,t(K)/1000,type='b',pch =1:13,xlim=c(50,500),ylab='',xlab='')
legend('topright',legend =taxa[order(K[,1])],pch = 1:13,col=1:13,lty=1:13,cex=0.7)
matplot(max_dist/1000,t(K)/1000,type='b',pch =1:13,xlim=c(50,500),ylab='',xlab='')
legend('topright',legend =taxa[order(K[,1])],pch = 1:13,col=c(1:6,1:6,1),lty=c(1:5,1:5,1:3),cex=0.7)
matplot(max_dist/1000,t(K)/1000,type='b',pch =1:13,xlim=c(50,500),ylab='',xlab='')
legend('topright',legend =taxa,pch = 1:13,col=c(1:6,1:6,1),lty=c(1:5,1:5,1:3),cex=0.7)
matplot(max_dist/1000,t(K)/1000,type='b',pch =1:13,xlim=c(50,500),ylab='',xlab='')
legend('topright',legend =taxa,pch = 1:13,col=c(1:6,1:6,1),lty=c(1:5,1:5,1:3),cex=0.7)
Klength(taxa)
length(taxa)
matplot(max_dist/1000,t(K)/1000,type='b',pch =1:14,xlim=c(50,500),ylab='',xlab='')
legend('topright',legend =taxa,pch = 1:14,col=c(1:6,1:6,1:2),lty=c(1:5,1:5,1:4),cex=0.7)
K{,1}
K[,1]
sort(K[,1])
matplot(max_dist/1000,t(K)/1000,type='b',pch =1:14,xlim=c(50,500),ylab='',xlab='')
legend('topright',legend =taxa,pch = 1:14,col=c(1:6,1:6,1:2),cex=0.7)
matplot(max_dist/1000,t(K)/1000,type='p',pch =1:14,xlim=c(50,500),ylab='',xlab='')
legend('topright',legend =taxa,pch = 1:14,col=c(1:6,1:6,1:2),cex=0.7)
matplot(max_dist/1000,1/t(K)/1000,type='p',pch =1:14,xlim=c(50,500),ylab='',xlab='')
matplot(max_dist/1000,t(K)/1000,type='p',pch =1:14,xlim=c(50,500),ylab='',xlab='')
legend('topright',legend =taxa,pch = 1:14,col=c(1:6,1:6,1:2),cex=0.7)
taxa
K
K/1000
matplot(max_dist/1000,t(K)/1000,type='p',pch =1:14,xlim=c(50,500),ylab='',xlab='',col=1:14)
legend('topright',legend =taxa,pch = 1:14,col=1:14,cex=0.7)
taxa1 <- taxa[taxa!='Elm']
taxa1 <- taxa[taxa!='Elm']
taxa1
matplot(max_dist/1000,t(K)/1000,type='p',pch =1:13,xlim=c(50,500),ylab='',xlab='',col=1:13)
legend('topright',legend =taxa,pch = 1:13,col=1:13,cex=0.7)
matplot(max_dist/1000,t(K)/1000,type='p',pch =1:13,xlim=c(50,500),ylab='',xlab='',col=1:13)
legend('topright',legend =taxa1,pch = 1:13,col=1:13,cex=0.7)
dim(K)
fall.speed
taxa1 <- taxa[!taxa%in%c('Elm','Poplar')]
matplot(max_dist/1000,t(K)/1000,type='p',pch =1:13,xlim=c(50,500),ylab='',xlab='',col=1:13)
legend('topright',legend =taxa1,pch = 1:13,col=1:13,cex=0.7)
pdf('~/K_meters.pdf',height=10,width =10)
matplot(max_dist/1000,t(K)/1000,type='p',pch =1:13,xlim=c(50,500),ylab='',xlab='',col=1:13)
legend('topright',legend =taxa1,pch = 1:13,col=1:13,cex=0.7)
mtext(side = 1,'km',line=2.2)
mtext(side = 1,'K/1000',line=2.2)
dev.off()
pdf('~/K_meters.pdf',height=10,width =10)
matplot(max_dist/1000,t(K)/1000,type='p',pch =1:13,xlim=c(50,500),ylab='',xlab='',col=1:13)
legend('topright',legend =taxa1,pch = 1:13,col=1:13,cex=0.7)
mtext(side = 1,'km',line=2.2)
mtext(side = 2,'K/1000',line=2.2)
dev.off()
pdf('~/K_meters.pdf',height=7,width =10)
matplot(max_dist/1000,t(K)/1000,type='p',pch =1:13,xlim=c(50,500),ylab='',xlab='',col=1:13)
legend('topright',legend =taxa1,pch = 1:13,col=1:13,cex=0.7)
mtext(side = 1,'km',line=2.2)
mtext(side = 2,'K/1000',line=2.2)
dev.off()
K <-
sapply(max_dist/1000,function(x){
K_calc(fall_speed = fall.speed, R = 200,zmax = x,n=0.25,u=3,c=0.12)
})
pdf('~/K_km.pdf',height=7,width =10)
matplot(max_dist/1000,t(K)/1000,type='p',pch =1:13,xlim=c(50,500),ylab='',xlab='',col=1:13)
legend('topright',legend =taxa1,pch = 1:13,col=1:13,cex=0.7)
mtext(side = 1,'km',line=2.2)
mtext(side = 2,'K/1000',line=2.2)
dev.off()
pdf('~/K_km.pdf',height=7,width =10)
matplot(max_dist/1000,t(K),type='p',pch =1:13,xlim=c(50,500),ylab='',xlab='',col=1:13)
legend('topright',legend =taxa1,pch = 1:13,col=1:13,cex=0.7)
mtext(side = 1,'km',line=2.2)
mtext(side = 2,'K/1000',line=2.2)
dev.off()
K
K <-
sapply(max_dist/1000,function(x){
K_calc(fall_speed = fall.speed, R = 0.2,zmax = x,n=0.25,u=3,c=0.12)
})
pdf('~/K_km.pdf',height=7,width =10)
matplot(max_dist/1000,t(K),type='p',pch =1:13,xlim=c(50,500),ylab='',xlab='',col=1:13)
legend('topright',legend =taxa1,pch = 1:13,col=1:13,cex=0.7)
mtext(side = 1,'km',line=2.2)
mtext(side = 2,'K/1000',line=2.2)
dev.off()
K
getwd()
library(zipfR)
library(rioja)
setwd('~/Reveals_NEUS/')
#--------------------------------------------------------------------------------------------------------------]
#function to estimate species dependent depositional coefficient
Ki <- function(b, R, zmax=400000){
ul1 <- b*(zmax-R)^(1/8)
ul2 <- b*(zmax+R)^(1/8)
ul3 <- b*(2*R)^(1/8)
gamma_Ki <- Igamma(8, ul1, lower=TRUE) -
Igamma(8, ul2, lower=TRUE) +
Igamma(8, ul3, lower=TRUE)
return(4*pi*R/b^8*gamma_Ki)
}
K_calc <- function(fall_speed,R,zmax,n,u,c){
#calculate parameter b later on used to estimate deposition coeffcient
b <- 4/sqrt(pi) * fall.speed/(n*u*c)
#species specific depositional coefficient
K_species <-
sapply(b,function(x){
Ki(x[[1]],R=R,zmax = zmax)
})
#eq (5) in Sugita (2007a)
}
#----------------------------------------------------------------------------------------------------------------
#parameters
reveals.params <- read.csv('data/reveals_input_params_variable.csv')
taxa <- reveals.params$species
#fall speed
fall.speed <- reveals.params$fallspeed
names(fall.speed) <- taxa
fall.speed <- as.data.frame(t(fall.speed))
n=0.25
u=3
c=0.12
b <- 4/sqrt(pi) * fall.speed/(n*u*c)
max_dist <- c(50000,seq(100000,400000,100000))
taxa1 <- taxa[!taxa%in%c('Elm','Poplar')]
K <-
sapply(max_dist,function(x){
K_calc(fall_speed = fall.speed, R = 200,zmax = x,n=0.25,u=3,c=0.12)
})
K
pdf('~/K.pdf',height=7,width =10)
matplot(max_dist/1000,t(K),type='p',pch =1:13,xlim=c(50,500),ylab='',xlab='',col=1:13)
legend('topright',legend =taxa1,pch = 1:13,col=1:13,cex=0.7)
mtext(side = 1,'m',line=2.2)
mtext(side = 2,'K/1000',line=2.2)
dev.off()
pdf(paste(plot.loc,'K.pdf',sep=''),height=7,width =10)
library(zipfR)
library(rioja)
setwd('~/Reveals_NEUS/')
plot.loc <- 'figures/'
#--------------------------------------------------------------------------------------------------------------]
#function to estimate species dependent depositional coefficient
Ki <- function(b, R, zmax=400000){
ul1 <- b*(zmax-R)^(1/8)
ul2 <- b*(zmax+R)^(1/8)
ul3 <- b*(2*R)^(1/8)
gamma_Ki <- Igamma(8, ul1, lower=TRUE) -
Igamma(8, ul2, lower=TRUE) +
Igamma(8, ul3, lower=TRUE)
return(4*pi*R/b^8*gamma_Ki)
}
K_calc <- function(fall_speed,R,zmax,n,u,c){
#calculate parameter b later on used to estimate deposition coeffcient
b <- 4/sqrt(pi) * fall.speed/(n*u*c)
#species specific depositional coefficient
K_species <-
sapply(b,function(x){
Ki(x[[1]],R=R,zmax = zmax)
})
#eq (5) in Sugita (2007a)
}
#----------------------------------------------------------------------------------------------------------------
#parameters
reveals.params <- read.csv('data/reveals_input_params_variable.csv')
taxa <- reveals.params$species
#fall speed
fall.speed <- reveals.params$fallspeed
names(fall.speed) <- taxa
fall.speed <- as.data.frame(t(fall.speed))
n=0.25
u=3
c=0.12
b <- 4/sqrt(pi) * fall.speed/(n*u*c)
max_dist <- c(50000,seq(100000,400000,100000))
taxa1 <- taxa[!taxa%in%c('Elm','Poplar')]
#########################################################################################################################
K <-
sapply(max_dist,function(x){
K_calc(fall_speed = fall.speed, R = 200,zmax = x,n=n,u=u,c=c)
})
pdf(paste(plot.loc,'K.pdf',sep=''),height=7,width =10)
matplot(max_dist/1000,t(K),type='p',pch =1:13,xlim=c(50,500),ylab='',xlab='',col=1:13)
legend('topright',legend =taxa1,pch = 1:13,col=1:13,cex=0.7)
mtext(side = 1,'m',line=2.2)
mtext(side = 2,'K/1000',line=2.2)
dev.off()
# plot(1:15,seq(1,10,length.out=15),type='n',ylab='',xlab='')
#
#
# k_spec_100 <-
#   sapply(b,function(x){
#     Ki(x[[1]],R=0.5,zmax = 100)
#   })
#
# plot_order <- names(k_spec_100[order(k_spec_100)])
#
# plot(1:15,seq(1,10,length.out=15),type='n',ylab='',xlab='')
#
#
# for(i in 1:6) {
#
#   k_spec <-
#   sapply(b,function(x){
#     Ki(x[[1]],R=0.5,zmax = i*100)
#   })
#
#   rel_k <- k_spec/k_spec['Tamarack']
#
#   points(rel_k[plot_order],pch = 16,col=i)
# }
#
taxa1
dim(K)
pdf(paste(plot.loc,'K.pdf',sep=''),height=7,width =10)
matplot(max_dist/1000,t(K),type='p',pch =1:13,xlim=c(50,500),ylab='',xlab='',col=1:13)
legend('topright',legend =taxa,pch = 1:13,col=1:13,cex=0.7)
mtext(side = 1,'m',line=2.2)
mtext(side = 2,'K/1000',line=2.2)
dev.off()
pdf(paste(plot.loc,'K.pdf',sep=''),height=7,width =10)
matplot(max_dist/1000,t(K),type='p',pch =1:14,xlim=c(50,500),ylab='',xlab='',col=1:14)
legend('topright',legend =taxa,pch = 1:14,col=1:14,cex=0.7)
mtext(side = 1,'m',line=2.2)
mtext(side = 2,'K/1000',line=2.2)
dev.off()
